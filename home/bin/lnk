#!/usr/bin/env bash

# Logging stuff.
function e_header()   { echo -e "\n\033[1m$@\033[0m"; }
function e_success()  { echo -e " \033[1;32m✔\033[0m  $@"; }
function e_error()    { echo -e " \033[1;31m✖\033[0m  $@"; }
function e_arrow()    { echo -e " \033[1;34m➜\033[0m  $@"; }
function e_reset()    { echo -e "\033[0m"; }

function usage() {
	cat << EOF
Usage: lnk [options] src_dir target_dir

Linking directory.
If a file has the prefix "cp~", it will be copied instead of symlinked.

Options:
    -h, --help      Show help options
    --no-backup      Skip backup
    --no-overwrite  Do not overwrite
EOF
}

backup=1
overwrite=1

if [ -z $1 ]; then
	usage
	exit
fi

# http://stackoverflow.com/questions/402377/using-getopts-in-bash-shell-script-to-get-long-and-short-command-line-options/7680682#7680682
optspec=":h-:"
while getopts "$optspec" optchar; do
	case "${optchar}" in
		-)
			case "${OPTARG}" in
				no-backup)
					backup=0
					;;
				help)
					usage
					exit
					;;
				no-overwrite)
					overwrite=0
					;;
			esac;;
		h)
			usage
			exit
			;;
	esac
done

# Create a .backup directory in the destination folder
# move the existing file there if it's not a symlink
# skip if $backup is set to 0
function do_backup() {
	if [ $backup -eq 0 ]; then
		return
	fi
	if [ -f "$1/$base" ] && [ ! -L "$1/$base" ]; then
		mkdir -p "$1"/.backup
		mv "$1/$2" "$1"/.backup/
		if [ $? -eq 0 ]; then
			e_success "Backed up $2 to $1/.backup/"
		else
			e_error "Failed to back up $2"
			return 1
		fi
	fi
}

# $1: full path of file to be linked to
# $2: directory path to link to
function do_link() {
	base=$(basename "$1")
	# default action is symlink
	action="ln -s"
	# if files has the copyPrefix, switch to cp action instead
	copyPrefix="cp~"
	if [[ $base = "$copyPrefix"* ]]; then
		action="cp"
		# remove the copyPrefix from destination filename
		base="${base/$copyPrefix/}"
	fi

	# if the src and destination files are the same, skipping
	if cmp --silent "$1" "$2/$base"; then
		e_arrow "Skipping '$2/$base' because file already exists and is the same"
		return
	fi
	# try to backup first, and if unsuccessful, skip
	do_backup "$2" "$base"
	if [ $? -ne 0 ]; then
		e_arrow "Backup failed. Skipping $base"
		return 1
	fi

	args="-v"
	if [ $overwrite -eq 1 ]; then
		args="$args -f"
	fi

	$action $args "$1" "$2/$base"

	if [ $? -eq 0 ]; then
		e_success "Successfully $action to $2/$base from $1"
	else
		e_error "Failed to create $2/$base from $1"
	fi
}
# link file
# $1: file to be linked to
# $2: directory path to link to
function link_file() {
	if [ -f "$1" ]; then
		case "$1" in
			# ignore .swp or .DS_Store files
			*.swp|*.DS_Store|Session.vim)
				;;
			*)
				do_link "$1" "$2"
				;;
		esac
	elif [ -d "$1" ]; then
		base=$(basename "$1")
		case "$base" in
			# skip current or prev directory
			.|..)
				;;
			# recursively call link_dir
			*)
				link_dir "$1" "$2/$base"
				;;
		esac
	fi
}

# link dir
# $1: directory to link
# $2: directory to link to
function link_dir() {
	# if destination dir does not exist
	if [ ! -d "$2" ]; then
		mkdir -p "$2"
	fi
	if [ -d "$1" ] && [ -d "$2" ]; then
	# use ${var%/} to remove trailing slash
	# see https://www.gnu.org/software/bash/manual/bashref.html#Shell-Parameter-Expansion
		for file in "${1%/}"/{.,}*; do
			link_file "$file" "${2%/}"
		done
	fi
}

e_header "Linking dir $1 to $2"
link_dir "$@"

e_reset
