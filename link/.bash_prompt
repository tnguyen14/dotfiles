#!/usr/bin/env bash

# Inpsired from
# https://github.com/mathiasbynens/dotfiles/blob/master/.bash_prompt
# https://github.com/sindresorhus/pure/blob/master/pure.zsh
# https://github.com/sapegin/dotfiles/blob/master/includes/bash_prompt.bash

# COLORS!
if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM=xterm-256color
fi

# A good way to see all 256 colors
# for i in {0..255}; do tput setab $i; echo -n $i "    "; tput setab 0; done

if tput setaf 1 &> /dev/null; then
	tput sgr0
	if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
		MAGENTA=$(tput setaf 9)
		ORANGE=$(tput setaf 172)
		# GREEN=$(tput setaf 190)
		GREEN=$(tput setaf 2)
		PURPLE=$(tput setaf 141)
		WHITE=$(tput setaf 15)
		BLUE=$(tput setaf 12)
	else
		MAGENTA=$(tput setaf 5)
		ORANGE=$(tput setaf 4)
		GREEN=$(tput setaf 2)
		PURPLE=$(tput setaf 1)
		WHITE=$(tput setaf 7)
	fi
	BOLD=$(tput bold)
	RESET=$(tput sgr0)
else
	MAGENTA="\e[1;31m"
	ORANGE="\e[1;33m"
	GREEN="\e[1;32m"
	PURPLE="\e[1;35m"
	WHITE="\e[1;37m"
	BLUE="\e[1;34m"
	BOLD=""
	RESET="\e[m"
fi

export MAGENTA
export ORANGE
export GREEN
export PURPLE
export WHITE
export BLUE
export BOLD
export RESET
export YELLOW=$(tput setaf 3)
export RED=$(tput setaf 1)


# Symbols
prompt_symbol="❯"
prompt_continue_symbol="→ "
git_clean_symbol="☀ "
git_dirty_symbol="☂ "
git_untracked_symbol="☁ "
git_ahead_symbol="⇡ "
git_behind_symbol="⇣ "

function parse_git_dirty() {
	local git_state=$git_clean_symbol
	# check if we're in a git repo
	command git rev-parse --is-inside-work-tree &>/dev/null || return
	# check if it's dirty
	command git diff --quiet --ignore-submodules HEAD &>/dev/null
	(($? == 1)) && git_state=$git_dirty_symbol
	echo $git_state
}

function parse_git() {
	# git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
	local git_prompt=
	if [[ "true" = "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]]; then
		git_prompt="$(~/git-parse.py)"
	fi
	# add white space in front
	echo " $(echo $git_prompt)"
}

function prompt_command() {
	local exit_code=$?
	# Timestamp
	local timestamp="$ORANGE\A "
	# User color
	case $(id -u) in
		0) user_color="$RED" ;;  # root
		*) user_color="$GREEN" ;;
	esac
	# Only show username if not default
	local user_prompt
	[[ "$USER" != "$local_username" ]] && user_prompt="$user_color$USER$NOCOLOR"
	# Show hostname inside SSH session
	local host_prompt
	[ -n "$remote" ] && host_prompt="@$YELLOW$HOSTNAME$NOCOLOR"
	# Show delimiter if user or host visible
	local login_delimiter
	[ -n "$user_prompt" ] || [ -n "$host_prompt" ] && login_delimiter=" "

	# If using emoji, add two spaces after
	[ -n "$user_emoji" ] && emoji="$user_emoji  "

	local git=$(parse_git)

	# Interaction prompt
		first_line="$timestamp$user_prompt$host_prompt$login_delimiter$emoji$BLUE\w$WHITE$git$RESET"
	# Text (commands) inside \[...\] does not impact line length calculation which fixes stange bug when looking through the history
	second_line="\`if [ $exit_code == 0 ]; then echo \[\$GREEN\]':;'; else echo \[\$RED\]':'\[\$GREEN\]';'; fi\` \[\$RESET\]"
	export PS1="$first_line\n$second_line"

	# Continuation interaction prompt
	export PS2="\[$ORANGE\]$prompt_continue_symbol \[$RESET\]"

	# Terminal title
	local title="$(basename "$PWD")"
	[ -n "$remote" ] && title="$title \xE2\x80\x94 $HOSTNAME"
	echo -ne "\033]0;$title"; echo -ne "\007"
}

 function powerline_prompt() {
   export PS1="$(~/powerline-shell.py $? 2> /dev/null)"
}

PROMPT_COMMAND=prompt_command
